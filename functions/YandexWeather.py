import requests
from functions import yandex_weather_requests_parameters
from geopy import Nominatim
from geopy.adapters import AioHTTPAdapter
from pprint import pprint


class GetWeatherInformation:
    async def requests_get(self):
        return requests.get("https://api.weather.yandex.ru/v2/forecast?", params={'lat': self.lat,
                                                                                  'lon': self.lon,
                                                                                  'lang': self.lang,
                                                                                  'limit': self.limit,
                                                                                  'hours': self.hours,
                                                                                  'extra': self.extra},
                            headers={'X-Yandex-API-Key': self.apiKey})

    def __init__(self, api_key, coordinates, lang='ru_RU', limit='1', hours='false', extra='false'):
        coordinates_list = coordinates.split(' ')
        print(coordinates_list)
        self.lat = coordinates_list[0]
        self.lon = coordinates_list[1]
        self.lang = lang
        self.limit = limit
        self.hours = hours
        self.extra = extra
        self.apiKey = api_key


    async def get_current_temperature(self):
        request = await self.requests_get()
        return request.json()["fact"]["temp"]

    async def get_today_weather(self):
        request = await self.requests_get()
        condition = request.json()["fact"]["condition"]
        condition_icon = {'clear': '‚òÄ',
                     'partly-cloudy': 'üå§',
                     'cloudy': 'üå•',
                     'overcast': '‚òÅ',
                     'drizzle': 'üå¶',
                     'light-rain': 'üå¶',
                     'rain': 'üåß',
                     'moderate-rain': 'üåß',
                     'heavy-rain': 'üåß',
                     'continuous-heavy-rain': 'üåß',
                     'showers': '‚òî',
                     'wet-snow': 'üåßüå®',
                     'light-snow': 'üå®',
                     'snow': 'üå®',
                     'snow-showers': 'üå®‚ùÑ',
                     'hail': 'üåß‚ùÑ',
                     'thunderstorm': 'üå©',
                     'thunderstorm-with-rain': '‚õà',
                     'thunderstorm-with-hail': '‚õà‚ùÑ'}
        condition_text = {'clear': '—è—Å–Ω–æ',
                          'partly-cloudy': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ',
                          'cloudy': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
                          'overcast': '–ø–∞—Å–º—É—Ä–Ω–æ',
                          'drizzle': '–º–æ—Ä–æ—Å—å',
                          'light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
                          'rain': '–¥–æ–∂–¥—å',
                          'moderate-rain': '—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
                          'heavy-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
                          'continuous-heavy-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
                          'showers': '–ª–∏–≤–µ–Ω—å',
                          'wet-snow': '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º',
                          'light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
                          'snow': '—Å–Ω–µ–≥',
                          'snow-showers': '—Å–Ω–µ–≥–æ–ø–∞–¥',
                          'hail': '–≥—Ä–∞–¥',
                          'thunderstorm': '–≥—Ä–æ–∑–∞',
                          'thunderstorm-with-rain': '–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π',
                          'thunderstorm-with-hail': '–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º'}
        wind_dir = request.json()["fact"]["wind_dir"]
        wind_dir_icon = {'nw': '‚Üñ',
                         'n': '‚¨Ü',
                         'ne': '‚Üó',
                         'e': '‚û°',
                         'se': '‚Üò',
                         's': '‚¨á',
                         'sw': '‚Üô',
                         'w': '‚¨Ö',
                         'c': '‚Üî'}
        daytime = request.json()["fact"]["daytime"]
        daytime_icon = {'d': 'üåù',
                        'n': 'üåö'}
        return f'–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å:{daytime_icon[daytime]}\n' \
               f'–û–ø–∏—Å–∞–Ω–∏–µ - {condition_text[condition]}{condition_icon[condition]}\n' \
               f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {request.json()["fact"]["temp"]}¬∞üå°\n' \
               f'–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ - {request.json()["fact"]["feels_like"]}¬∞üå°\n' \
               f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ - {request.json()["fact"]["wind_speed"]}{wind_dir_icon[wind_dir]}–º/c\n' \
               f'–í–ª–∞–∂–Ω–æ—Å—Ç—å - {request.json()["fact"]["humidity"]}%üíß'



async def get_coordinates_from_city_name(city_name):
    async with Nominatim(user_agent="notifBot", adapter_factory=AioHTTPAdapter) as geolocator:
        location = await geolocator.geocode(city_name)
        try:
            return f'{str(location.latitude)} {str(location.longitude)}'
        except:
            return False
